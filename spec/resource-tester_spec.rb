# Encoding: utf-8

require 'spec_helper'

describe 'yum::resource-tester' do
  let(:chef_run) {
    ChefSpec::Runner.new(
      :step_into => ['yum_repository', 'yum_globalconfig']
      ).converge(described_recipe)
  }

  let(:test1_content) do
    '# Generated by Chef
# Local modifications will be overwritten.

[test1]
name=an test
baseurl=http://drop.the.baseurl.biz
enabled=1
gpgcheck=1
sslverify=1
'
  end

  let(:test2_content) do
    '# Generated by Chef
# Local modifications will be overwritten.

[unit-test-2]
name=test all the things!
baseurl=http://example.com/wat
cost=10
enabled=1
enablegroups=1
exclude=package1 package2 package3
failovermethod=priority
fastestmirror_enabled=true
gpgcheck=1
gpgkey=http://example.com/RPM-GPG-KEY-FOOBAR-1
http_caching=all
include=/some/other.repo
includepkgs=package4 package5
keepalive=1
metadata_expire=never
mirrorlist=http://hellothereiammirrorliststring.biz
mirror_expire=300
mirrorlist_expire=86400
priority=10
proxy=http://hellothereiamproxystring.biz
proxy_username=kermit
proxy_password=dafrog
retries=10
sslcacert=/path/to/directory
sslclientcert=/path/to/client/cert
sslclientkey=/path/to/client/key
sslverify=1
timeout=10
'
  end

  let(:test5_content) do
    '# Generated by Chef
# Local modifications will be overwritten.

[test5]
name=an test
baseurl=http://drop.the.baseurl.biz
enabled=1
gpgcheck=1
sslverify=1
'
  end

  let(:test6_content) do
    '# Generated by Chef
# Local modifications will be overwritten.

[test6]
name=an test
baseurl=http://drop.the.baseurl.biz
enabled=1
gpgcheck=1
gpgkey=http://example.com/RPM-GPG-KEY-FOOBAR-1
sslverify=1
'
  end

  let(:test7_content) do
    '[main]
cachefir=/var/cache/yum/$basearch/$releasever
debuglevel=2
enable_group_conditionals=0
exactarch=1
gpgcheck=0
installonly_limit=3
keepcache=0
logfile=/var/log/yum.log
obsoletes=1
plugins=1'
  end
  
  # The simplest case
  it 'creates yum_repository[test1]' do
    expect(chef_run).to create_yum_repository('test1')
  end

  it 'steps into yum_repository and creates template[/etc/yum.repos.d/test1.repo]' do
    expect(chef_run).to render_file('/etc/yum.repos.d/test1.repo').with_content(test1_content)
  end

  it 'steps into yum_repository and creates template[/etc/yum.repos.d/test1.repo]' do
    expect(chef_run).to render_file('/etc/yum.repos.d/test1.repo').with_content(test1_content)
  end

  # Full blown parameterization. Exercercises the
  # recipe->resource->provider->template chain
  it 'creates yum_repository[test2]' do
    expect(chef_run).to create_yum_repository('test2')
  end

  it 'steps into yum_repository and creates template[/etc/yum.repos.d/unit-test-2.repo]' do
    expect(chef_run).to render_file('/etc/yum.repos.d/unit-test-2.repo').with_content(test2_content)
  end

  # create alias 'add'
  it 'adds yum_repository[test3]' do
    expect(chef_run).to add_yum_repository('test3')
  end

  # delete alias 'remove'
  it 'adds yum_repository[test4]' do
    expect(chef_run).to remove_yum_repository('test4')
  end

  # baseurl alias 'url'
  it 'creates yum_repository[test5]' do
    expect(chef_run).to create_yum_repository('test5')
  end

  it 'steps into yum_repository and creates template[/etc/yum.repos.d/test5.repo]' do
    expect(chef_run).to render_file('/etc/yum.repos.d/test5.repo').with_content(test5_content)
  end

  # gpgkey alias 'keyurl'
  it 'creates yum_repository[test6]' do
    expect(chef_run).to create_yum_repository('test6')
  end

  it 'steps into yum_repository and creates template[/etc/yum.repos.d/test6.repo]' do
    expect(chef_run).to render_file('/etc/yum.repos.d/test6.repo').with_content(test6_content)
  end

  #####
  
  # typical settings for yum_globalconfig
  it 'creates yum_globalconfig[/etc/yum.conf]' do
    expect(chef_run).to create_yum_globalconfig('/tmp/yum.conf')
  end

  it 'steps into yum_globalconfig and creates template[/etc/yum.conf]' do
    expect(chef_run).to render_file('/tmp/yum.conf').with_content(test7_content)
  end
  
end
